/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { BackgroundSyncPlugin } from 'workbox-background-sync';
import { Queue } from 'workbox-background-sync/Queue';
import { openDB } from 'idb';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Open IndexedDB
const dbPromise = openDB('responses-db', 1, {
  upgrade(db) {
    db.createObjectStore('responses', { keyPath: 'id', autoIncrement: true });
  },
});

// Implement Background Sync for fetch requests.
const queue = new Queue('fetch-requests', {
  onSync: async ({ queue }) => {
    let entry;
    while ((entry = await queue.shiftRequest())) {
      try {
        console.log('Replaying request:', entry.request);
        const response = await fetch(entry.request.clone());
        const responseText = await response.text();
        let responseData;
        try {
          responseData = JSON.parse(responseText);
        } catch (e) {
          responseData = responseText;
        }
        console.log('Request replayed successfully:', responseData);

        // Store the response in IndexedDB
        const db = await dbPromise;
        await db.add('responses', { response: responseData });
        await notifyQueueSize(); // Notify clients about the queue size

      } catch (error) {
        console.error('Replay failed for request:', entry.request, error);
        await queue.unshiftRequest(entry);
        throw error;
      }
    }
    // Notify clients that sync is complete
    const clients = await self.clients.matchAll();
    for (const client of clients) {
      client.postMessage({ type: 'SYNC_COMPLETE' });
    }
  },
});

// Function to notify clients about the queue size
const notifyQueueSize = async () => {
  const clients = await self.clients.matchAll();
  for (const client of clients) {
    client.postMessage({ type: 'QUEUE_SIZE', size: await queue.size() });
  }
};

self.addEventListener('fetch', async (event) => {
  if (!self.navigator.onLine) {
    console.log('Offline. Queueing request:', event.request);
    const promiseChain = fetch(event.request.clone()).catch(() => {
      if (event.request.method === 'POST' || event.request.method === 'PATCH') {
        const f = async () => {
          await queue.pushRequest({ request: event.request });
          notifyQueueSize(); // Notify clients about the queue size
        }
        f();
      }
    });
    event.waitUntil(promiseChain);
  }
});
