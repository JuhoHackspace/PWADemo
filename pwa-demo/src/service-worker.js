/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { BackgroundSyncPlugin } from 'workbox-background-sync';
import { Queue } from 'workbox-background-sync/Queue';
import { openDB } from 'idb';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Open IndexedDB
const dbPromise = openDB('responses-db', 1, {
  upgrade(db) {
    db.createObjectStore('responses', { keyPath: 'id', autoIncrement: true });
  },
});

// Implement Background Sync for fetch requests.
const queue = new Queue('fetch-requests', {
  onSync: async ({ queue }) => {
    let entry;
    while ((entry = await queue.shiftRequest())) {
      try {
        console.log('Replaying request:', entry.request);
        const response = await fetch(entry.request.clone());
        const responseText = await response.text();
        let responseData;
        try {
          responseData = JSON.parse(responseText);
        } catch (e) {
          responseData = responseText;
        }
        console.log('Request replayed successfully:', responseData);

        // Store the response in IndexedDB
        /*const db = await dbPromise;
        await db.add('responses', { response: responseData });*/
        await notifyQueueSize(); // Notify clients about the queue size

      } catch (error) {
        console.error('Replay failed for request:', entry.request, error);
        await queue.unshiftRequest(entry);
        throw error;
      }
    }
    // Notify clients that sync is complete
    const clients = await self.clients.matchAll();
    for (const client of clients) {
      client.postMessage({ type: 'SYNC_COMPLETE' });
    }
  },
});

// Function to notify clients about the queue size
const notifyQueueSize = async () => {
  const clients = await self.clients.matchAll();
  for (const client of clients) {
    client.postMessage({ type: 'QUEUE_SIZE', size: await queue.size() });
  }
};

self.addEventListener('fetch', async (event) => {
  if(event.request.url.includes('/api/locations')) {
    if (!self.navigator.onLine) {
      const promiseChain = fetch(event.request.clone()).catch(() => {
        if (event.request.method === 'POST' || event.request.method === 'PATCH') {
          console.log('Offline. Queueing request:', event.request);
          const f = async () => {
            await queue.pushRequest({ request: event.request });
            notifyQueueSize(); // Notify clients about the queue size
          }
          f();
        }
      });
      event.waitUntil(promiseChain);
    }
  }
});

// Cache map tiles for a specific area
/*const cacheMapTiles = async (lat, lon, radius) => {
  const cache = await caches.open('map-tiles');
  const zoomLevels = [15];
  const tilePromises = [];
  const maxConcurrentRequests = 5;
  const delayBetweenRequests = 20;

  const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  const fetchWithRetry = async (url, retries) => {
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error('Network response was not ok');
      await cache.put(url, response);
    } catch (error) {
      if (retries > 0) {
        console.warn(`Retrying ${url}, ${retries} retries left`);
        await delay(10);
        return fetchWithRetry(url, retries - 1);
      } else {
        console.error(`Failed to fetch ${url} after ${retries} retries`);
        throw error;
      }
    }
  };

  try {

    for (const zoom of zoomLevels) {
      const tileSize = 256;
      const earthRadius = 6378137;
      const initialResolution = 2 * Math.PI * earthRadius / tileSize;
      const originShift = 2 * Math.PI * earthRadius / 2.0;

      const latLonToMeters = (lat, lon) => {
        const mx = lon * originShift / 180.0;
        const my = Math.log(Math.tan((90 + lat) * Math.PI / 360.0)) / (Math.PI / 180.0);
        return [mx, my * originShift / 180.0];
      };

      const metersToTile = (mx, my, zoom) => {
        const res = initialResolution / Math.pow(2, zoom);
        const px = (mx + originShift) / res;
        const py = (my + originShift) / res;
        return [Math.floor(px / tileSize), Math.floor(py / tileSize)];
      };

      const [mx, my] = latLonToMeters(lat, lon);
      const [tx, ty] = metersToTile(mx, my, zoom);
      const radiusInTiles = Math.ceil(radius / (initialResolution / Math.pow(2, zoom)));

      for (let x = tx - radiusInTiles; x <= tx + radiusInTiles; x++) {
        for (let y = ty - radiusInTiles; y <= ty + radiusInTiles; y++) {
          const url = `https://a.tile.openstreetmap.org/${zoom}/${x}/${y}.png`;
          // Check if the tile is already cached
          const cachedResponse = await cache.match(url);
          if (!cachedResponse) {
            tilePromises.push(
              (async () => {
                await delay(delayBetweenRequests);
                return fetchWithRetry(url, 3); // Retry up to 3 times
              })()
            );

            if (tilePromises.length >= maxConcurrentRequests) {
              await Promise.all(tilePromises);
              tilePromises.splice(0, tilePromises.length); // Clear the array
            }
          }
        }
      }
    };
    if (tilePromises.length > 0) {
      await Promise.all(tilePromises);
      tilePromises.splice(0, tilePromises.length); // Clear the array
    }
  } catch (error) {
    console.error('Error caching map tiles:', error);
  }
};*/

//Event listener to cache map tiles
/*self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'CACHE_MAP_TILES') {
    console.log('Caching map tiles for:', event.data);
    const { lat, lon, radius } = event.data;
    cacheMapTiles(lat, lon, radius);
  }
});*/

// Log cache updates and responses
class LoggingPlugin {
  async cacheDidUpdate({ cacheName, request, oldResponse, newResponse }) {
    console.log(`Cached new response for ${request.url} in cache ${cacheName}`);
  }

  async cachedResponseWillBeUsed({ cacheName, request, cachedResponse }) {
    if (cachedResponse) {
      console.log(`Serving cached response for ${request.url} from cache ${cacheName}`);
    } else {
      console.log(`No cached response for ${request.url} in cache ${cacheName}`);
    }
    return cachedResponse;
  }
}

// Custom handler function to switch between caching strategies
const customHandler = async ({ event }) => {
  const cacheFirst = new CacheFirst({
    cacheName: 'map-tiles',
    plugins: [
      new ExpirationPlugin({ maxEntries: 1000 }),
      new LoggingPlugin(),
    ],
  });

  const staleWhileRevalidate = new StaleWhileRevalidate({
    cacheName: 'map-tiles',
    plugins: [
      new ExpirationPlugin({ maxEntries: 1000 }),
      new LoggingPlugin(),
    ],
  });

  if (navigator.onLine) {
    console.log('Online. Using stale-while-revalidate strategy for: ', event);
    return await staleWhileRevalidate.handle(event);
  } else {
    console.log('Offline. Using cache-first strategy for ', event);
    return await cacheFirst.handle(event);
  }
};

// Register route to serve cached map tiles with custom handler
registerRoute(
  ({ url }) => url.origin === 'https://a.tile.openstreetmap.org',
  customHandler
);

/*self.addEventListener('fetch', (event) => {
  if (event.request.url.startsWith('https://a.tile.openstreetmap.org') && event.request.method === 'GET') {
    event.respondWith(
      caches.open('map-tiles').then((cache) => {
        return cache.match(event.request).then((response) => {
          if (response) {
            console.log('Serving cached tile:', response, 'for url:', event.request.url);
            return response;
          } else {
            return fetch(event.request).then((response) => {
              console.log('Caching tile:', response, 'for url:', event.request.url);
              cache.put(event.request, response.clone());
              return response;
            });
          }
        });
      })
    );
}
});*/

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

/*self.addEventListener('activate', (event) => {
  event.waitUntil(
    (async () => {
      // Check if the navigator is offline
      if (!navigator.onLine) {
        const clients = await self.clients.matchAll();
        for (const client of clients) {
          client.postMessage({ type: 'OFFLINE_STATUS' });
        }
      }
    })()
  );
});*/